// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/lookandhate/course_auth/internal/repository.UserRepository -o user_repository_minimock.go -n UserRepositoryMock -p mocks

import (
	"sync"

	"github.com/lookandhate/course_auth/internal/repository"

	"context"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	repository "github.com/lookandhate/course_auth/internal/repository/model"
	"github.com/lookandhate/course_auth/internal/service/model"
)

// UserRepositoryMock implements repository.UserRepository
type UserRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheckUserExists          func(ctx context.Context, id int) (b1 bool, err error)
	inspectFuncCheckUserExists   func(ctx context.Context, id int)
	afterCheckUserExistsCounter  uint64
	beforeCheckUserExistsCounter uint64
	CheckUserExistsMock          mUserRepositoryMockCheckUserExists

	funcCreateUser          func(ctx context.Context, user *repository.CreateUserModel) (i1 int, err error)
	inspectFuncCreateUser   func(ctx context.Context, user *repository.CreateUserModel)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mUserRepositoryMockCreateUser

	funcDeleteUser          func(ctx context.Context, id int) (err error)
	inspectFuncDeleteUser   func(ctx context.Context, id int)
	afterDeleteUserCounter  uint64
	beforeDeleteUserCounter uint64
	DeleteUserMock          mUserRepositoryMockDeleteUser

	funcGetUser          func(ctx context.Context, id int) (up1 *model.UserModel, err error)
	inspectFuncGetUser   func(ctx context.Context, id int)
	afterGetUserCounter  uint64
	beforeGetUserCounter uint64
	GetUserMock          mUserRepositoryMockGetUser

	funcUpdateUser          func(ctx context.Context, updateUser *model.UpdateUserModel) (up1 *model.UserModel, err error)
	inspectFuncUpdateUser   func(ctx context.Context, updateUser *model.UpdateUserModel)
	afterUpdateUserCounter  uint64
	beforeUpdateUserCounter uint64
	UpdateUserMock          mUserRepositoryMockUpdateUser
}

// NewUserRepositoryMock returns a mock for repository.UserRepository
func NewUserRepositoryMock(t minimock.Tester) *UserRepositoryMock {
	m := &UserRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckUserExistsMock = mUserRepositoryMockCheckUserExists{mock: m}
	m.CheckUserExistsMock.callArgs = []*UserRepositoryMockCheckUserExistsParams{}

	m.CreateUserMock = mUserRepositoryMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*UserRepositoryMockCreateUserParams{}

	m.DeleteUserMock = mUserRepositoryMockDeleteUser{mock: m}
	m.DeleteUserMock.callArgs = []*UserRepositoryMockDeleteUserParams{}

	m.GetUserMock = mUserRepositoryMockGetUser{mock: m}
	m.GetUserMock.callArgs = []*UserRepositoryMockGetUserParams{}

	m.UpdateUserMock = mUserRepositoryMockUpdateUser{mock: m}
	m.UpdateUserMock.callArgs = []*UserRepositoryMockUpdateUserParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserRepositoryMockCheckUserExists struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockCheckUserExistsExpectation
	expectations       []*UserRepositoryMockCheckUserExistsExpectation

	callArgs []*UserRepositoryMockCheckUserExistsParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockCheckUserExistsExpectation specifies expectation struct of the UserRepository.CheckUserExists
type UserRepositoryMockCheckUserExistsExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockCheckUserExistsParams
	paramPtrs *UserRepositoryMockCheckUserExistsParamPtrs
	results   *UserRepositoryMockCheckUserExistsResults
	Counter   uint64
}

// UserRepositoryMockCheckUserExistsParams contains parameters of the UserRepository.CheckUserExists
type UserRepositoryMockCheckUserExistsParams struct {
	ctx context.Context
	id  int
}

// UserRepositoryMockCheckUserExistsParamPtrs contains pointers to parameters of the UserRepository.CheckUserExists
type UserRepositoryMockCheckUserExistsParamPtrs struct {
	ctx *context.Context
	id  *int
}

// UserRepositoryMockCheckUserExistsResults contains results of the UserRepository.CheckUserExists
type UserRepositoryMockCheckUserExistsResults struct {
	b1  bool
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) Optional() *mUserRepositoryMockCheckUserExists {
	mmCheckUserExists.optional = true
	return mmCheckUserExists
}

// Expect sets up expected params for UserRepository.CheckUserExists
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) Expect(ctx context.Context, id int) *mUserRepositoryMockCheckUserExists {
	if mmCheckUserExists.mock.funcCheckUserExists != nil {
		mmCheckUserExists.mock.t.Fatalf("UserRepositoryMock.CheckUserExists mock is already set by Set")
	}

	if mmCheckUserExists.defaultExpectation == nil {
		mmCheckUserExists.defaultExpectation = &UserRepositoryMockCheckUserExistsExpectation{}
	}

	if mmCheckUserExists.defaultExpectation.paramPtrs != nil {
		mmCheckUserExists.mock.t.Fatalf("UserRepositoryMock.CheckUserExists mock is already set by ExpectParams functions")
	}

	mmCheckUserExists.defaultExpectation.params = &UserRepositoryMockCheckUserExistsParams{ctx, id}
	for _, e := range mmCheckUserExists.expectations {
		if minimock.Equal(e.params, mmCheckUserExists.defaultExpectation.params) {
			mmCheckUserExists.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckUserExists.defaultExpectation.params)
		}
	}

	return mmCheckUserExists
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.CheckUserExists
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockCheckUserExists {
	if mmCheckUserExists.mock.funcCheckUserExists != nil {
		mmCheckUserExists.mock.t.Fatalf("UserRepositoryMock.CheckUserExists mock is already set by Set")
	}

	if mmCheckUserExists.defaultExpectation == nil {
		mmCheckUserExists.defaultExpectation = &UserRepositoryMockCheckUserExistsExpectation{}
	}

	if mmCheckUserExists.defaultExpectation.params != nil {
		mmCheckUserExists.mock.t.Fatalf("UserRepositoryMock.CheckUserExists mock is already set by Expect")
	}

	if mmCheckUserExists.defaultExpectation.paramPtrs == nil {
		mmCheckUserExists.defaultExpectation.paramPtrs = &UserRepositoryMockCheckUserExistsParamPtrs{}
	}
	mmCheckUserExists.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCheckUserExists
}

// ExpectIdParam2 sets up expected param id for UserRepository.CheckUserExists
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) ExpectIdParam2(id int) *mUserRepositoryMockCheckUserExists {
	if mmCheckUserExists.mock.funcCheckUserExists != nil {
		mmCheckUserExists.mock.t.Fatalf("UserRepositoryMock.CheckUserExists mock is already set by Set")
	}

	if mmCheckUserExists.defaultExpectation == nil {
		mmCheckUserExists.defaultExpectation = &UserRepositoryMockCheckUserExistsExpectation{}
	}

	if mmCheckUserExists.defaultExpectation.params != nil {
		mmCheckUserExists.mock.t.Fatalf("UserRepositoryMock.CheckUserExists mock is already set by Expect")
	}

	if mmCheckUserExists.defaultExpectation.paramPtrs == nil {
		mmCheckUserExists.defaultExpectation.paramPtrs = &UserRepositoryMockCheckUserExistsParamPtrs{}
	}
	mmCheckUserExists.defaultExpectation.paramPtrs.id = &id

	return mmCheckUserExists
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.CheckUserExists
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) Inspect(f func(ctx context.Context, id int)) *mUserRepositoryMockCheckUserExists {
	if mmCheckUserExists.mock.inspectFuncCheckUserExists != nil {
		mmCheckUserExists.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.CheckUserExists")
	}

	mmCheckUserExists.mock.inspectFuncCheckUserExists = f

	return mmCheckUserExists
}

// Return sets up results that will be returned by UserRepository.CheckUserExists
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) Return(b1 bool, err error) *UserRepositoryMock {
	if mmCheckUserExists.mock.funcCheckUserExists != nil {
		mmCheckUserExists.mock.t.Fatalf("UserRepositoryMock.CheckUserExists mock is already set by Set")
	}

	if mmCheckUserExists.defaultExpectation == nil {
		mmCheckUserExists.defaultExpectation = &UserRepositoryMockCheckUserExistsExpectation{mock: mmCheckUserExists.mock}
	}
	mmCheckUserExists.defaultExpectation.results = &UserRepositoryMockCheckUserExistsResults{b1, err}
	return mmCheckUserExists.mock
}

// Set uses given function f to mock the UserRepository.CheckUserExists method
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) Set(f func(ctx context.Context, id int) (b1 bool, err error)) *UserRepositoryMock {
	if mmCheckUserExists.defaultExpectation != nil {
		mmCheckUserExists.mock.t.Fatalf("Default expectation is already set for the UserRepository.CheckUserExists method")
	}

	if len(mmCheckUserExists.expectations) > 0 {
		mmCheckUserExists.mock.t.Fatalf("Some expectations are already set for the UserRepository.CheckUserExists method")
	}

	mmCheckUserExists.mock.funcCheckUserExists = f
	return mmCheckUserExists.mock
}

// When sets expectation for the UserRepository.CheckUserExists which will trigger the result defined by the following
// Then helper
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) When(ctx context.Context, id int) *UserRepositoryMockCheckUserExistsExpectation {
	if mmCheckUserExists.mock.funcCheckUserExists != nil {
		mmCheckUserExists.mock.t.Fatalf("UserRepositoryMock.CheckUserExists mock is already set by Set")
	}

	expectation := &UserRepositoryMockCheckUserExistsExpectation{
		mock:   mmCheckUserExists.mock,
		params: &UserRepositoryMockCheckUserExistsParams{ctx, id},
	}
	mmCheckUserExists.expectations = append(mmCheckUserExists.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.CheckUserExists return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockCheckUserExistsExpectation) Then(b1 bool, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockCheckUserExistsResults{b1, err}
	return e.mock
}

// Times sets number of times UserRepository.CheckUserExists should be invoked
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) Times(n uint64) *mUserRepositoryMockCheckUserExists {
	if n == 0 {
		mmCheckUserExists.mock.t.Fatalf("Times of UserRepositoryMock.CheckUserExists mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCheckUserExists.expectedInvocations, n)
	return mmCheckUserExists
}

func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) invocationsDone() bool {
	if len(mmCheckUserExists.expectations) == 0 && mmCheckUserExists.defaultExpectation == nil && mmCheckUserExists.mock.funcCheckUserExists == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCheckUserExists.mock.afterCheckUserExistsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCheckUserExists.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CheckUserExists implements repository.UserRepository
func (mmCheckUserExists *UserRepositoryMock) CheckUserExists(ctx context.Context, id int) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmCheckUserExists.beforeCheckUserExistsCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckUserExists.afterCheckUserExistsCounter, 1)

	if mmCheckUserExists.inspectFuncCheckUserExists != nil {
		mmCheckUserExists.inspectFuncCheckUserExists(ctx, id)
	}

	mm_params := UserRepositoryMockCheckUserExistsParams{ctx, id}

	// Record call args
	mmCheckUserExists.CheckUserExistsMock.mutex.Lock()
	mmCheckUserExists.CheckUserExistsMock.callArgs = append(mmCheckUserExists.CheckUserExistsMock.callArgs, &mm_params)
	mmCheckUserExists.CheckUserExistsMock.mutex.Unlock()

	for _, e := range mmCheckUserExists.CheckUserExistsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmCheckUserExists.CheckUserExistsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckUserExists.CheckUserExistsMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckUserExists.CheckUserExistsMock.defaultExpectation.params
		mm_want_ptrs := mmCheckUserExists.CheckUserExistsMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockCheckUserExistsParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCheckUserExists.t.Errorf("UserRepositoryMock.CheckUserExists got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmCheckUserExists.t.Errorf("UserRepositoryMock.CheckUserExists got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckUserExists.t.Errorf("UserRepositoryMock.CheckUserExists got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckUserExists.CheckUserExistsMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckUserExists.t.Fatal("No results are set for the UserRepositoryMock.CheckUserExists")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmCheckUserExists.funcCheckUserExists != nil {
		return mmCheckUserExists.funcCheckUserExists(ctx, id)
	}
	mmCheckUserExists.t.Fatalf("Unexpected call to UserRepositoryMock.CheckUserExists. %v %v", ctx, id)
	return
}

// CheckUserExistsAfterCounter returns a count of finished UserRepositoryMock.CheckUserExists invocations
func (mmCheckUserExists *UserRepositoryMock) CheckUserExistsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckUserExists.afterCheckUserExistsCounter)
}

// CheckUserExistsBeforeCounter returns a count of UserRepositoryMock.CheckUserExists invocations
func (mmCheckUserExists *UserRepositoryMock) CheckUserExistsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckUserExists.beforeCheckUserExistsCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.CheckUserExists.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckUserExists *mUserRepositoryMockCheckUserExists) Calls() []*UserRepositoryMockCheckUserExistsParams {
	mmCheckUserExists.mutex.RLock()

	argCopy := make([]*UserRepositoryMockCheckUserExistsParams, len(mmCheckUserExists.callArgs))
	copy(argCopy, mmCheckUserExists.callArgs)

	mmCheckUserExists.mutex.RUnlock()

	return argCopy
}

// MinimockCheckUserExistsDone returns true if the count of the CheckUserExists invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockCheckUserExistsDone() bool {
	if m.CheckUserExistsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CheckUserExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CheckUserExistsMock.invocationsDone()
}

// MinimockCheckUserExistsInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockCheckUserExistsInspect() {
	for _, e := range m.CheckUserExistsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.CheckUserExists with params: %#v", *e.params)
		}
	}

	afterCheckUserExistsCounter := mm_atomic.LoadUint64(&m.afterCheckUserExistsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CheckUserExistsMock.defaultExpectation != nil && afterCheckUserExistsCounter < 1 {
		if m.CheckUserExistsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.CheckUserExists")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.CheckUserExists with params: %#v", *m.CheckUserExistsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckUserExists != nil && afterCheckUserExistsCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.CheckUserExists")
	}

	if !m.CheckUserExistsMock.invocationsDone() && afterCheckUserExistsCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.CheckUserExists but found %d calls",
			mm_atomic.LoadUint64(&m.CheckUserExistsMock.expectedInvocations), afterCheckUserExistsCounter)
	}
}

type mUserRepositoryMockCreateUser struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockCreateUserExpectation
	expectations       []*UserRepositoryMockCreateUserExpectation

	callArgs []*UserRepositoryMockCreateUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockCreateUserExpectation specifies expectation struct of the UserRepository.CreateUser
type UserRepositoryMockCreateUserExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockCreateUserParams
	paramPtrs *UserRepositoryMockCreateUserParamPtrs
	results   *UserRepositoryMockCreateUserResults
	Counter   uint64
}

// UserRepositoryMockCreateUserParams contains parameters of the UserRepository.CreateUser
type UserRepositoryMockCreateUserParams struct {
	ctx  context.Context
	user *repository.CreateUserModel
}

// UserRepositoryMockCreateUserParamPtrs contains pointers to parameters of the UserRepository.CreateUser
type UserRepositoryMockCreateUserParamPtrs struct {
	ctx  *context.Context
	user **repository.CreateUserModel
}

// UserRepositoryMockCreateUserResults contains results of the UserRepository.CreateUser
type UserRepositoryMockCreateUserResults struct {
	i1  int
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateUser *mUserRepositoryMockCreateUser) Optional() *mUserRepositoryMockCreateUser {
	mmCreateUser.optional = true
	return mmCreateUser
}

// Expect sets up expected params for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Expect(ctx context.Context, user *repository.CreateUserModel) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.paramPtrs != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by ExpectParams functions")
	}

	mmCreateUser.defaultExpectation.params = &UserRepositoryMockCreateUserParams{ctx, user}
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserRepositoryMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateUser
}

// ExpectUserParam2 sets up expected param user for UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) ExpectUserParam2(user *repository.CreateUserModel) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &UserRepositoryMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.user = &user

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Inspect(f func(ctx context.Context, user *repository.CreateUserModel)) *mUserRepositoryMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by UserRepository.CreateUser
func (mmCreateUser *mUserRepositoryMockCreateUser) Return(i1 int, err error) *UserRepositoryMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &UserRepositoryMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &UserRepositoryMockCreateUserResults{i1, err}
	return mmCreateUser.mock
}

// Set uses given function f to mock the UserRepository.CreateUser method
func (mmCreateUser *mUserRepositoryMockCreateUser) Set(f func(ctx context.Context, user *repository.CreateUserModel) (i1 int, err error)) *UserRepositoryMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the UserRepository.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the UserRepository.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	return mmCreateUser.mock
}

// When sets expectation for the UserRepository.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mUserRepositoryMockCreateUser) When(ctx context.Context, user *repository.CreateUserModel) *UserRepositoryMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("UserRepositoryMock.CreateUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockCreateUserExpectation{
		mock:   mmCreateUser.mock,
		params: &UserRepositoryMockCreateUserParams{ctx, user},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.CreateUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockCreateUserExpectation) Then(i1 int, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockCreateUserResults{i1, err}
	return e.mock
}

// Times sets number of times UserRepository.CreateUser should be invoked
func (mmCreateUser *mUserRepositoryMockCreateUser) Times(n uint64) *mUserRepositoryMockCreateUser {
	if n == 0 {
		mmCreateUser.mock.t.Fatalf("Times of UserRepositoryMock.CreateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateUser.expectedInvocations, n)
	return mmCreateUser
}

func (mmCreateUser *mUserRepositoryMockCreateUser) invocationsDone() bool {
	if len(mmCreateUser.expectations) == 0 && mmCreateUser.defaultExpectation == nil && mmCreateUser.mock.funcCreateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateUser.mock.afterCreateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateUser implements repository.UserRepository
func (mmCreateUser *UserRepositoryMock) CreateUser(ctx context.Context, user *repository.CreateUserModel) (i1 int, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, user)
	}

	mm_params := UserRepositoryMockCreateUserParams{ctx, user}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, &mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_want_ptrs := mmCreateUser.CreateUserMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockCreateUserParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("UserRepositoryMock.CreateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the UserRepositoryMock.CreateUser")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, user)
	}
	mmCreateUser.t.Fatalf("Unexpected call to UserRepositoryMock.CreateUser. %v %v", ctx, user)
	return
}

// CreateUserAfterCounter returns a count of finished UserRepositoryMock.CreateUser invocations
func (mmCreateUser *UserRepositoryMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of UserRepositoryMock.CreateUser invocations
func (mmCreateUser *UserRepositoryMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mUserRepositoryMockCreateUser) Calls() []*UserRepositoryMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockCreateUserDone() bool {
	if m.CreateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateUserMock.invocationsDone()
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser with params: %#v", *e.params)
		}
	}

	afterCreateUserCounter := mm_atomic.LoadUint64(&m.afterCreateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && afterCreateUserCounter < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.CreateUser")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.CreateUser with params: %#v", *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && afterCreateUserCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.CreateUser")
	}

	if !m.CreateUserMock.invocationsDone() && afterCreateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.CreateUser but found %d calls",
			mm_atomic.LoadUint64(&m.CreateUserMock.expectedInvocations), afterCreateUserCounter)
	}
}

type mUserRepositoryMockDeleteUser struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockDeleteUserExpectation
	expectations       []*UserRepositoryMockDeleteUserExpectation

	callArgs []*UserRepositoryMockDeleteUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockDeleteUserExpectation specifies expectation struct of the UserRepository.DeleteUser
type UserRepositoryMockDeleteUserExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockDeleteUserParams
	paramPtrs *UserRepositoryMockDeleteUserParamPtrs
	results   *UserRepositoryMockDeleteUserResults
	Counter   uint64
}

// UserRepositoryMockDeleteUserParams contains parameters of the UserRepository.DeleteUser
type UserRepositoryMockDeleteUserParams struct {
	ctx context.Context
	id  int
}

// UserRepositoryMockDeleteUserParamPtrs contains pointers to parameters of the UserRepository.DeleteUser
type UserRepositoryMockDeleteUserParamPtrs struct {
	ctx *context.Context
	id  *int
}

// UserRepositoryMockDeleteUserResults contains results of the UserRepository.DeleteUser
type UserRepositoryMockDeleteUserResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteUser *mUserRepositoryMockDeleteUser) Optional() *mUserRepositoryMockDeleteUser {
	mmDeleteUser.optional = true
	return mmDeleteUser
}

// Expect sets up expected params for UserRepository.DeleteUser
func (mmDeleteUser *mUserRepositoryMockDeleteUser) Expect(ctx context.Context, id int) *mUserRepositoryMockDeleteUser {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("UserRepositoryMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &UserRepositoryMockDeleteUserExpectation{}
	}

	if mmDeleteUser.defaultExpectation.paramPtrs != nil {
		mmDeleteUser.mock.t.Fatalf("UserRepositoryMock.DeleteUser mock is already set by ExpectParams functions")
	}

	mmDeleteUser.defaultExpectation.params = &UserRepositoryMockDeleteUserParams{ctx, id}
	for _, e := range mmDeleteUser.expectations {
		if minimock.Equal(e.params, mmDeleteUser.defaultExpectation.params) {
			mmDeleteUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteUser.defaultExpectation.params)
		}
	}

	return mmDeleteUser
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.DeleteUser
func (mmDeleteUser *mUserRepositoryMockDeleteUser) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockDeleteUser {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("UserRepositoryMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &UserRepositoryMockDeleteUserExpectation{}
	}

	if mmDeleteUser.defaultExpectation.params != nil {
		mmDeleteUser.mock.t.Fatalf("UserRepositoryMock.DeleteUser mock is already set by Expect")
	}

	if mmDeleteUser.defaultExpectation.paramPtrs == nil {
		mmDeleteUser.defaultExpectation.paramPtrs = &UserRepositoryMockDeleteUserParamPtrs{}
	}
	mmDeleteUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteUser
}

// ExpectIdParam2 sets up expected param id for UserRepository.DeleteUser
func (mmDeleteUser *mUserRepositoryMockDeleteUser) ExpectIdParam2(id int) *mUserRepositoryMockDeleteUser {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("UserRepositoryMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &UserRepositoryMockDeleteUserExpectation{}
	}

	if mmDeleteUser.defaultExpectation.params != nil {
		mmDeleteUser.mock.t.Fatalf("UserRepositoryMock.DeleteUser mock is already set by Expect")
	}

	if mmDeleteUser.defaultExpectation.paramPtrs == nil {
		mmDeleteUser.defaultExpectation.paramPtrs = &UserRepositoryMockDeleteUserParamPtrs{}
	}
	mmDeleteUser.defaultExpectation.paramPtrs.id = &id

	return mmDeleteUser
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.DeleteUser
func (mmDeleteUser *mUserRepositoryMockDeleteUser) Inspect(f func(ctx context.Context, id int)) *mUserRepositoryMockDeleteUser {
	if mmDeleteUser.mock.inspectFuncDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.DeleteUser")
	}

	mmDeleteUser.mock.inspectFuncDeleteUser = f

	return mmDeleteUser
}

// Return sets up results that will be returned by UserRepository.DeleteUser
func (mmDeleteUser *mUserRepositoryMockDeleteUser) Return(err error) *UserRepositoryMock {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("UserRepositoryMock.DeleteUser mock is already set by Set")
	}

	if mmDeleteUser.defaultExpectation == nil {
		mmDeleteUser.defaultExpectation = &UserRepositoryMockDeleteUserExpectation{mock: mmDeleteUser.mock}
	}
	mmDeleteUser.defaultExpectation.results = &UserRepositoryMockDeleteUserResults{err}
	return mmDeleteUser.mock
}

// Set uses given function f to mock the UserRepository.DeleteUser method
func (mmDeleteUser *mUserRepositoryMockDeleteUser) Set(f func(ctx context.Context, id int) (err error)) *UserRepositoryMock {
	if mmDeleteUser.defaultExpectation != nil {
		mmDeleteUser.mock.t.Fatalf("Default expectation is already set for the UserRepository.DeleteUser method")
	}

	if len(mmDeleteUser.expectations) > 0 {
		mmDeleteUser.mock.t.Fatalf("Some expectations are already set for the UserRepository.DeleteUser method")
	}

	mmDeleteUser.mock.funcDeleteUser = f
	return mmDeleteUser.mock
}

// When sets expectation for the UserRepository.DeleteUser which will trigger the result defined by the following
// Then helper
func (mmDeleteUser *mUserRepositoryMockDeleteUser) When(ctx context.Context, id int) *UserRepositoryMockDeleteUserExpectation {
	if mmDeleteUser.mock.funcDeleteUser != nil {
		mmDeleteUser.mock.t.Fatalf("UserRepositoryMock.DeleteUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockDeleteUserExpectation{
		mock:   mmDeleteUser.mock,
		params: &UserRepositoryMockDeleteUserParams{ctx, id},
	}
	mmDeleteUser.expectations = append(mmDeleteUser.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.DeleteUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockDeleteUserExpectation) Then(err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockDeleteUserResults{err}
	return e.mock
}

// Times sets number of times UserRepository.DeleteUser should be invoked
func (mmDeleteUser *mUserRepositoryMockDeleteUser) Times(n uint64) *mUserRepositoryMockDeleteUser {
	if n == 0 {
		mmDeleteUser.mock.t.Fatalf("Times of UserRepositoryMock.DeleteUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteUser.expectedInvocations, n)
	return mmDeleteUser
}

func (mmDeleteUser *mUserRepositoryMockDeleteUser) invocationsDone() bool {
	if len(mmDeleteUser.expectations) == 0 && mmDeleteUser.defaultExpectation == nil && mmDeleteUser.mock.funcDeleteUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteUser.mock.afterDeleteUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteUser implements repository.UserRepository
func (mmDeleteUser *UserRepositoryMock) DeleteUser(ctx context.Context, id int) (err error) {
	mm_atomic.AddUint64(&mmDeleteUser.beforeDeleteUserCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteUser.afterDeleteUserCounter, 1)

	if mmDeleteUser.inspectFuncDeleteUser != nil {
		mmDeleteUser.inspectFuncDeleteUser(ctx, id)
	}

	mm_params := UserRepositoryMockDeleteUserParams{ctx, id}

	// Record call args
	mmDeleteUser.DeleteUserMock.mutex.Lock()
	mmDeleteUser.DeleteUserMock.callArgs = append(mmDeleteUser.DeleteUserMock.callArgs, &mm_params)
	mmDeleteUser.DeleteUserMock.mutex.Unlock()

	for _, e := range mmDeleteUser.DeleteUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteUser.DeleteUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteUser.DeleteUserMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteUser.DeleteUserMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteUser.DeleteUserMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockDeleteUserParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteUser.t.Errorf("UserRepositoryMock.DeleteUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDeleteUser.t.Errorf("UserRepositoryMock.DeleteUser got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteUser.t.Errorf("UserRepositoryMock.DeleteUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteUser.DeleteUserMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteUser.t.Fatal("No results are set for the UserRepositoryMock.DeleteUser")
		}
		return (*mm_results).err
	}
	if mmDeleteUser.funcDeleteUser != nil {
		return mmDeleteUser.funcDeleteUser(ctx, id)
	}
	mmDeleteUser.t.Fatalf("Unexpected call to UserRepositoryMock.DeleteUser. %v %v", ctx, id)
	return
}

// DeleteUserAfterCounter returns a count of finished UserRepositoryMock.DeleteUser invocations
func (mmDeleteUser *UserRepositoryMock) DeleteUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUser.afterDeleteUserCounter)
}

// DeleteUserBeforeCounter returns a count of UserRepositoryMock.DeleteUser invocations
func (mmDeleteUser *UserRepositoryMock) DeleteUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteUser.beforeDeleteUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.DeleteUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteUser *mUserRepositoryMockDeleteUser) Calls() []*UserRepositoryMockDeleteUserParams {
	mmDeleteUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockDeleteUserParams, len(mmDeleteUser.callArgs))
	copy(argCopy, mmDeleteUser.callArgs)

	mmDeleteUser.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteUserDone returns true if the count of the DeleteUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockDeleteUserDone() bool {
	if m.DeleteUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteUserMock.invocationsDone()
}

// MinimockDeleteUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockDeleteUserInspect() {
	for _, e := range m.DeleteUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.DeleteUser with params: %#v", *e.params)
		}
	}

	afterDeleteUserCounter := mm_atomic.LoadUint64(&m.afterDeleteUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteUserMock.defaultExpectation != nil && afterDeleteUserCounter < 1 {
		if m.DeleteUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.DeleteUser")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.DeleteUser with params: %#v", *m.DeleteUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteUser != nil && afterDeleteUserCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.DeleteUser")
	}

	if !m.DeleteUserMock.invocationsDone() && afterDeleteUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.DeleteUser but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteUserMock.expectedInvocations), afterDeleteUserCounter)
	}
}

type mUserRepositoryMockGetUser struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockGetUserExpectation
	expectations       []*UserRepositoryMockGetUserExpectation

	callArgs []*UserRepositoryMockGetUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockGetUserExpectation specifies expectation struct of the UserRepository.GetUser
type UserRepositoryMockGetUserExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockGetUserParams
	paramPtrs *UserRepositoryMockGetUserParamPtrs
	results   *UserRepositoryMockGetUserResults
	Counter   uint64
}

// UserRepositoryMockGetUserParams contains parameters of the UserRepository.GetUser
type UserRepositoryMockGetUserParams struct {
	ctx context.Context
	id  int
}

// UserRepositoryMockGetUserParamPtrs contains pointers to parameters of the UserRepository.GetUser
type UserRepositoryMockGetUserParamPtrs struct {
	ctx *context.Context
	id  *int
}

// UserRepositoryMockGetUserResults contains results of the UserRepository.GetUser
type UserRepositoryMockGetUserResults struct {
	up1 *model.UserModel
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUser *mUserRepositoryMockGetUser) Optional() *mUserRepositoryMockGetUser {
	mmGetUser.optional = true
	return mmGetUser
}

// Expect sets up expected params for UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) Expect(ctx context.Context, id int) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.paramPtrs != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by ExpectParams functions")
	}

	mmGetUser.defaultExpectation.params = &UserRepositoryMockGetUserParams{ctx, id}
	for _, e := range mmGetUser.expectations {
		if minimock.Equal(e.params, mmGetUser.defaultExpectation.params) {
			mmGetUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUser.defaultExpectation.params)
		}
	}

	return mmGetUser
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.params != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Expect")
	}

	if mmGetUser.defaultExpectation.paramPtrs == nil {
		mmGetUser.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserParamPtrs{}
	}
	mmGetUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetUser
}

// ExpectIdParam2 sets up expected param id for UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) ExpectIdParam2(id int) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.params != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Expect")
	}

	if mmGetUser.defaultExpectation.paramPtrs == nil {
		mmGetUser.defaultExpectation.paramPtrs = &UserRepositoryMockGetUserParamPtrs{}
	}
	mmGetUser.defaultExpectation.paramPtrs.id = &id

	return mmGetUser
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) Inspect(f func(ctx context.Context, id int)) *mUserRepositoryMockGetUser {
	if mmGetUser.mock.inspectFuncGetUser != nil {
		mmGetUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.GetUser")
	}

	mmGetUser.mock.inspectFuncGetUser = f

	return mmGetUser
}

// Return sets up results that will be returned by UserRepository.GetUser
func (mmGetUser *mUserRepositoryMockGetUser) Return(up1 *model.UserModel, err error) *UserRepositoryMock {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserRepositoryMockGetUserExpectation{mock: mmGetUser.mock}
	}
	mmGetUser.defaultExpectation.results = &UserRepositoryMockGetUserResults{up1, err}
	return mmGetUser.mock
}

// Set uses given function f to mock the UserRepository.GetUser method
func (mmGetUser *mUserRepositoryMockGetUser) Set(f func(ctx context.Context, id int) (up1 *model.UserModel, err error)) *UserRepositoryMock {
	if mmGetUser.defaultExpectation != nil {
		mmGetUser.mock.t.Fatalf("Default expectation is already set for the UserRepository.GetUser method")
	}

	if len(mmGetUser.expectations) > 0 {
		mmGetUser.mock.t.Fatalf("Some expectations are already set for the UserRepository.GetUser method")
	}

	mmGetUser.mock.funcGetUser = f
	return mmGetUser.mock
}

// When sets expectation for the UserRepository.GetUser which will trigger the result defined by the following
// Then helper
func (mmGetUser *mUserRepositoryMockGetUser) When(ctx context.Context, id int) *UserRepositoryMockGetUserExpectation {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserRepositoryMock.GetUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockGetUserExpectation{
		mock:   mmGetUser.mock,
		params: &UserRepositoryMockGetUserParams{ctx, id},
	}
	mmGetUser.expectations = append(mmGetUser.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.GetUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockGetUserExpectation) Then(up1 *model.UserModel, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockGetUserResults{up1, err}
	return e.mock
}

// Times sets number of times UserRepository.GetUser should be invoked
func (mmGetUser *mUserRepositoryMockGetUser) Times(n uint64) *mUserRepositoryMockGetUser {
	if n == 0 {
		mmGetUser.mock.t.Fatalf("Times of UserRepositoryMock.GetUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUser.expectedInvocations, n)
	return mmGetUser
}

func (mmGetUser *mUserRepositoryMockGetUser) invocationsDone() bool {
	if len(mmGetUser.expectations) == 0 && mmGetUser.defaultExpectation == nil && mmGetUser.mock.funcGetUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUser.mock.afterGetUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUser implements repository.UserRepository
func (mmGetUser *UserRepositoryMock) GetUser(ctx context.Context, id int) (up1 *model.UserModel, err error) {
	mm_atomic.AddUint64(&mmGetUser.beforeGetUserCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUser.afterGetUserCounter, 1)

	if mmGetUser.inspectFuncGetUser != nil {
		mmGetUser.inspectFuncGetUser(ctx, id)
	}

	mm_params := UserRepositoryMockGetUserParams{ctx, id}

	// Record call args
	mmGetUser.GetUserMock.mutex.Lock()
	mmGetUser.GetUserMock.callArgs = append(mmGetUser.GetUserMock.callArgs, &mm_params)
	mmGetUser.GetUserMock.mutex.Unlock()

	for _, e := range mmGetUser.GetUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUser.GetUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUser.GetUserMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUser.GetUserMock.defaultExpectation.params
		mm_want_ptrs := mmGetUser.GetUserMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockGetUserParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUser.t.Errorf("UserRepositoryMock.GetUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetUser.t.Errorf("UserRepositoryMock.GetUser got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUser.t.Errorf("UserRepositoryMock.GetUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUser.GetUserMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUser.t.Fatal("No results are set for the UserRepositoryMock.GetUser")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUser.funcGetUser != nil {
		return mmGetUser.funcGetUser(ctx, id)
	}
	mmGetUser.t.Fatalf("Unexpected call to UserRepositoryMock.GetUser. %v %v", ctx, id)
	return
}

// GetUserAfterCounter returns a count of finished UserRepositoryMock.GetUser invocations
func (mmGetUser *UserRepositoryMock) GetUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUser.afterGetUserCounter)
}

// GetUserBeforeCounter returns a count of UserRepositoryMock.GetUser invocations
func (mmGetUser *UserRepositoryMock) GetUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUser.beforeGetUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.GetUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUser *mUserRepositoryMockGetUser) Calls() []*UserRepositoryMockGetUserParams {
	mmGetUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockGetUserParams, len(mmGetUser.callArgs))
	copy(argCopy, mmGetUser.callArgs)

	mmGetUser.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserDone returns true if the count of the GetUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockGetUserDone() bool {
	if m.GetUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserMock.invocationsDone()
}

// MinimockGetUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockGetUserInspect() {
	for _, e := range m.GetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUser with params: %#v", *e.params)
		}
	}

	afterGetUserCounter := mm_atomic.LoadUint64(&m.afterGetUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserMock.defaultExpectation != nil && afterGetUserCounter < 1 {
		if m.GetUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.GetUser")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.GetUser with params: %#v", *m.GetUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUser != nil && afterGetUserCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.GetUser")
	}

	if !m.GetUserMock.invocationsDone() && afterGetUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.GetUser but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserMock.expectedInvocations), afterGetUserCounter)
	}
}

type mUserRepositoryMockUpdateUser struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockUpdateUserExpectation
	expectations       []*UserRepositoryMockUpdateUserExpectation

	callArgs []*UserRepositoryMockUpdateUserParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserRepositoryMockUpdateUserExpectation specifies expectation struct of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserExpectation struct {
	mock      *UserRepositoryMock
	params    *UserRepositoryMockUpdateUserParams
	paramPtrs *UserRepositoryMockUpdateUserParamPtrs
	results   *UserRepositoryMockUpdateUserResults
	Counter   uint64
}

// UserRepositoryMockUpdateUserParams contains parameters of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserParams struct {
	ctx        context.Context
	updateUser *model.UpdateUserModel
}

// UserRepositoryMockUpdateUserParamPtrs contains pointers to parameters of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserParamPtrs struct {
	ctx        *context.Context
	updateUser **model.UpdateUserModel
}

// UserRepositoryMockUpdateUserResults contains results of the UserRepository.UpdateUser
type UserRepositoryMockUpdateUserResults struct {
	up1 *model.UserModel
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Optional() *mUserRepositoryMockUpdateUser {
	mmUpdateUser.optional = true
	return mmUpdateUser
}

// Expect sets up expected params for UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Expect(ctx context.Context, updateUser *model.UpdateUserModel) *mUserRepositoryMockUpdateUser {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &UserRepositoryMockUpdateUserExpectation{}
	}

	if mmUpdateUser.defaultExpectation.paramPtrs != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by ExpectParams functions")
	}

	mmUpdateUser.defaultExpectation.params = &UserRepositoryMockUpdateUserParams{ctx, updateUser}
	for _, e := range mmUpdateUser.expectations {
		if minimock.Equal(e.params, mmUpdateUser.defaultExpectation.params) {
			mmUpdateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateUser.defaultExpectation.params)
		}
	}

	return mmUpdateUser
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockUpdateUser {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &UserRepositoryMockUpdateUserExpectation{}
	}

	if mmUpdateUser.defaultExpectation.params != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Expect")
	}

	if mmUpdateUser.defaultExpectation.paramPtrs == nil {
		mmUpdateUser.defaultExpectation.paramPtrs = &UserRepositoryMockUpdateUserParamPtrs{}
	}
	mmUpdateUser.defaultExpectation.paramPtrs.ctx = &ctx

	return mmUpdateUser
}

// ExpectUpdateUserParam2 sets up expected param updateUser for UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) ExpectUpdateUserParam2(updateUser *model.UpdateUserModel) *mUserRepositoryMockUpdateUser {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &UserRepositoryMockUpdateUserExpectation{}
	}

	if mmUpdateUser.defaultExpectation.params != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Expect")
	}

	if mmUpdateUser.defaultExpectation.paramPtrs == nil {
		mmUpdateUser.defaultExpectation.paramPtrs = &UserRepositoryMockUpdateUserParamPtrs{}
	}
	mmUpdateUser.defaultExpectation.paramPtrs.updateUser = &updateUser

	return mmUpdateUser
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Inspect(f func(ctx context.Context, updateUser *model.UpdateUserModel)) *mUserRepositoryMockUpdateUser {
	if mmUpdateUser.mock.inspectFuncUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.UpdateUser")
	}

	mmUpdateUser.mock.inspectFuncUpdateUser = f

	return mmUpdateUser
}

// Return sets up results that will be returned by UserRepository.UpdateUser
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Return(up1 *model.UserModel, err error) *UserRepositoryMock {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	if mmUpdateUser.defaultExpectation == nil {
		mmUpdateUser.defaultExpectation = &UserRepositoryMockUpdateUserExpectation{mock: mmUpdateUser.mock}
	}
	mmUpdateUser.defaultExpectation.results = &UserRepositoryMockUpdateUserResults{up1, err}
	return mmUpdateUser.mock
}

// Set uses given function f to mock the UserRepository.UpdateUser method
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Set(f func(ctx context.Context, updateUser *model.UpdateUserModel) (up1 *model.UserModel, err error)) *UserRepositoryMock {
	if mmUpdateUser.defaultExpectation != nil {
		mmUpdateUser.mock.t.Fatalf("Default expectation is already set for the UserRepository.UpdateUser method")
	}

	if len(mmUpdateUser.expectations) > 0 {
		mmUpdateUser.mock.t.Fatalf("Some expectations are already set for the UserRepository.UpdateUser method")
	}

	mmUpdateUser.mock.funcUpdateUser = f
	return mmUpdateUser.mock
}

// When sets expectation for the UserRepository.UpdateUser which will trigger the result defined by the following
// Then helper
func (mmUpdateUser *mUserRepositoryMockUpdateUser) When(ctx context.Context, updateUser *model.UpdateUserModel) *UserRepositoryMockUpdateUserExpectation {
	if mmUpdateUser.mock.funcUpdateUser != nil {
		mmUpdateUser.mock.t.Fatalf("UserRepositoryMock.UpdateUser mock is already set by Set")
	}

	expectation := &UserRepositoryMockUpdateUserExpectation{
		mock:   mmUpdateUser.mock,
		params: &UserRepositoryMockUpdateUserParams{ctx, updateUser},
	}
	mmUpdateUser.expectations = append(mmUpdateUser.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.UpdateUser return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockUpdateUserExpectation) Then(up1 *model.UserModel, err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockUpdateUserResults{up1, err}
	return e.mock
}

// Times sets number of times UserRepository.UpdateUser should be invoked
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Times(n uint64) *mUserRepositoryMockUpdateUser {
	if n == 0 {
		mmUpdateUser.mock.t.Fatalf("Times of UserRepositoryMock.UpdateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateUser.expectedInvocations, n)
	return mmUpdateUser
}

func (mmUpdateUser *mUserRepositoryMockUpdateUser) invocationsDone() bool {
	if len(mmUpdateUser.expectations) == 0 && mmUpdateUser.defaultExpectation == nil && mmUpdateUser.mock.funcUpdateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateUser.mock.afterUpdateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateUser implements repository.UserRepository
func (mmUpdateUser *UserRepositoryMock) UpdateUser(ctx context.Context, updateUser *model.UpdateUserModel) (up1 *model.UserModel, err error) {
	mm_atomic.AddUint64(&mmUpdateUser.beforeUpdateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateUser.afterUpdateUserCounter, 1)

	if mmUpdateUser.inspectFuncUpdateUser != nil {
		mmUpdateUser.inspectFuncUpdateUser(ctx, updateUser)
	}

	mm_params := UserRepositoryMockUpdateUserParams{ctx, updateUser}

	// Record call args
	mmUpdateUser.UpdateUserMock.mutex.Lock()
	mmUpdateUser.UpdateUserMock.callArgs = append(mmUpdateUser.UpdateUserMock.callArgs, &mm_params)
	mmUpdateUser.UpdateUserMock.mutex.Unlock()

	for _, e := range mmUpdateUser.UpdateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmUpdateUser.UpdateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateUser.UpdateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateUser.UpdateUserMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateUser.UpdateUserMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockUpdateUserParams{ctx, updateUser}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateUser.t.Errorf("UserRepositoryMock.UpdateUser got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.updateUser != nil && !minimock.Equal(*mm_want_ptrs.updateUser, mm_got.updateUser) {
				mmUpdateUser.t.Errorf("UserRepositoryMock.UpdateUser got unexpected parameter updateUser, want: %#v, got: %#v%s\n", *mm_want_ptrs.updateUser, mm_got.updateUser, minimock.Diff(*mm_want_ptrs.updateUser, mm_got.updateUser))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateUser.t.Errorf("UserRepositoryMock.UpdateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateUser.UpdateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateUser.t.Fatal("No results are set for the UserRepositoryMock.UpdateUser")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmUpdateUser.funcUpdateUser != nil {
		return mmUpdateUser.funcUpdateUser(ctx, updateUser)
	}
	mmUpdateUser.t.Fatalf("Unexpected call to UserRepositoryMock.UpdateUser. %v %v", ctx, updateUser)
	return
}

// UpdateUserAfterCounter returns a count of finished UserRepositoryMock.UpdateUser invocations
func (mmUpdateUser *UserRepositoryMock) UpdateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUser.afterUpdateUserCounter)
}

// UpdateUserBeforeCounter returns a count of UserRepositoryMock.UpdateUser invocations
func (mmUpdateUser *UserRepositoryMock) UpdateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUser.beforeUpdateUserCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.UpdateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateUser *mUserRepositoryMockUpdateUser) Calls() []*UserRepositoryMockUpdateUserParams {
	mmUpdateUser.mutex.RLock()

	argCopy := make([]*UserRepositoryMockUpdateUserParams, len(mmUpdateUser.callArgs))
	copy(argCopy, mmUpdateUser.callArgs)

	mmUpdateUser.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateUserDone returns true if the count of the UpdateUser invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockUpdateUserDone() bool {
	if m.UpdateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateUserMock.invocationsDone()
}

// MinimockUpdateUserInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockUpdateUserInspect() {
	for _, e := range m.UpdateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.UpdateUser with params: %#v", *e.params)
		}
	}

	afterUpdateUserCounter := mm_atomic.LoadUint64(&m.afterUpdateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateUserMock.defaultExpectation != nil && afterUpdateUserCounter < 1 {
		if m.UpdateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.UpdateUser")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.UpdateUser with params: %#v", *m.UpdateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateUser != nil && afterUpdateUserCounter < 1 {
		m.t.Error("Expected call to UserRepositoryMock.UpdateUser")
	}

	if !m.UpdateUserMock.invocationsDone() && afterUpdateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.UpdateUser but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateUserMock.expectedInvocations), afterUpdateUserCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckUserExistsInspect()

			m.MinimockCreateUserInspect()

			m.MinimockDeleteUserInspect()

			m.MinimockGetUserInspect()

			m.MinimockUpdateUserInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckUserExistsDone() &&
		m.MinimockCreateUserDone() &&
		m.MinimockDeleteUserDone() &&
		m.MinimockGetUserDone() &&
		m.MinimockUpdateUserDone()
}
